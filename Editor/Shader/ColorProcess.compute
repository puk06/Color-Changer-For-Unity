#pragma kernel CSMain

#include "BalanceModeShader.hlsl"
#include "AdvancedColorShader.hlsl"

RWTexture2D<float4> _Source;
RWTexture2D<float4> _Target;

float3 _prevColor;
float3 _ColorOffset;

// Balance Mode
bool _balanceModeEnabled;
int _balanceModeVersion;
float _balanceModeV1Weight;
float _balanceModeV1MinimumValue;
float _balanceModeV2Weight;
float _balanceModeV2Radius;
float _balanceModeV2MinimumValue;
bool _balanceModeV2IncludeOutside;
Texture2D _balanceModeV3Gradient;

// Advanced Color Settings
bool _advancedColorModeEnabled;
float _advancedColorSettingsBrightness;
float _advancedColorSettingsContrast;
float _advancedColorSettingsGamma;
float _advancedColorSettingsExposure;
float _advancedColorSettingsTransparency;

SamplerState samplerLinearClamp
{
    Filter = MIN_MAG_MIP_LINEAR;
    AddressU = Clamp;
    AddressV = Clamp;
};

[numthreads(16, 16, 1)]
void CSMain(uint3 id : SV_DispatchThreadID)
{
    uint width, height;
    _Target.GetDimensions(width, height);
    if (id.x >= width || id.y >= height) return;

    float4 color = _Source[id.xy] * 255.0;

    if (_balanceModeEnabled)
    {
        color.rgb = BalanceColorAdjustment(
            color.rgb, _prevColor, _ColorOffset,
            _balanceModeVersion,
            _balanceModeV1Weight,
            _balanceModeV1MinimumValue,
            _balanceModeV2Radius,
            _balanceModeV2Weight,
            _balanceModeV2MinimumValue,
            _balanceModeV2IncludeOutside,
            _balanceModeV3Gradient
        );
    }
    else
    {
        color.rgb += _ColorOffset;
    }

    if (_advancedColorModeEnabled)
    {
        color = AdvancedColorAdjustment(
            color,
            _advancedColorSettingsBrightness,
            _advancedColorSettingsContrast,
            _advancedColorSettingsGamma,
            _advancedColorSettingsExposure,
            _advancedColorSettingsTransparency
        );
    }
    
    _Target[id.xy] = saturate(color / 255.0);
}
